# Copyright (c) 2018-2019 The Ion developers
# Copyright (c) 2018-2019 The Wagerr developers
# Copyright (c) 2019 The OBSR developers
name: wagerr
base: core18
version: 3.0.99
summary:   wagerr, digital currency for decentralized betting
description: |
  Wagerr is a decentralized sportsbook that changes the way the world
  bets on sports.
  
  - built for everyone.
    Wagerr uses distributed
    blockchain technology to execute betting contracts. It escrows
    stakes, verifies results, and pays out winners. By eliminating
    centralauthorities, Wagerr solves the most pernicious problems in
    the industry. Reducing corruption and risk results in predictable
    operation. You can bet on Wagerr.
    - Free of All regulatory bodies
    - Unrestricted global Access
    - Support for all major sport leagues
    - Truly Deflationary Chain
  - Value Coupling
    Nearly half of all fees are systematically destroyed — and
    destroying fees diminishes coin supply. It’s a simple matter of
  - supply and demand
    Given steady demand, free markets tend to respond to a dwindling
    supply with rising asset price. Holders of the asset will only
    sell it for the highest price the market will bear. Watch the
    video and check out the “economics” tab for more details on how
    the Wagerr economy works.
  
  Homepage: https://wagerr.com/
  Blockexplorer (main): https://explorer.wagerr.com/
  Blockexplorer (testnet): https://explorer2.wagerr.com/
  Github: https://github.com/wagerr/wagerr/
  Wiki: https://github.com/wagerr/wagerr/wiki
  
  Coinmarketcap: https://coinmarketcap.com/currencies/wagerr/
  
  Chat with us:
  - Discord (https://discord.gg/vvvvDbv)
  
  Social networks/forums:
  - Telegram (https://t.me/wagerrcoin)
  - twitter (https://twitter.com/wagerrx)
  - reddit (https://www.reddit.com/r/Wagerr/)
  - bitcointalk (https://bitcointalk.org/index.php?topic=1911583.0)
  - facebook (https://www.facebook.com/wagerr/)
grade: devel
confinement: strict
apps:
  daemon:
    command: wagerrd
    plugs: [network, network-bind, home, removable-media]
    #desktop: wagerrd.desktop
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  daemon-testnet:
    command: wagerrd --testnet
    plugs: [network, network-bind, home, removable-media]
    #desktop: wagerrd_testnet.desktop
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  daemon-regtest:
    command: wagerrd --regtest
    plugs: [network, network-bind, home, removable-media]
    #desktop: wagerrd_regtest.desktop
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  qt:
    command: wagerr-qt
    plugs: [network, network-bind, network-status, unity7, desktop, desktop-legacy, wayland, x11, mir, opengl, home, gsettings, removable-media, screen-inhibit-control, pulseaudio, media-hub]
    desktop: wagerr-qt.desktop
    environment:
      QT_XKB_CONFIG_ROOT: $SNAP_USER_DATA:$SNAP/usr/share:$QT_XKB_CONFIG_ROOT
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  qt-testnet:
    command: wagerr-qt --testnet
    plugs: [network, network-bind, network-status, unity7, desktop, desktop-legacy, wayland, x11, mir, opengl, home, gsettings, removable-media, screen-inhibit-control, pulseaudio, media-hub]
    desktop: wagerr-qt_testnet.desktop
    environment:
      QT_XKB_CONFIG_ROOT: $SNAP_USER_DATA:$SNAP/usr/share:$QT_XKB_CONFIG_ROOT
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  qt-regtest:
    command: wagerr-qt --regtest
    plugs: [network, network-bind, network-status, unity7, desktop, desktop-legacy, wayland, x11, mir, opengl, home, gsettings, removable-media, screen-inhibit-control, pulseaudio, media-hub]
    desktop: wagerr-qt_regtest.desktop
    environment:
      QT_XKB_CONFIG_ROOT: $SNAP_USER_DATA:$SNAP/usr/share:$QT_XKB_CONFIG_ROOT
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  electron:
    command: wagerr-electron-app.AppImage
    plugs: [network, network-bind, network-status, unity7, desktop, desktop-legacy, wayland, x11, mir, opengl, home, gsettings, removable-media, screen-inhibit-control, pulseaudio, media-hub]
    desktop: wagerr-electron-app.desktop
    environment:
      QT_XKB_CONFIG_ROOT: $SNAP_USER_DATA:$SNAP/usr/share:$QT_XKB_CONFIG_ROOT
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  electron-testnet:
    command: wagerr-electron-app.AppImage--testnet
    plugs: [network, network-bind, network-status, unity7, desktop, desktop-legacy, wayland, x11, mir, opengl, home, gsettings, removable-media, screen-inhibit-control, pulseaudio, media-hub]
    desktop: wagerr-electron-app_testnet.desktop
    environment:
      QT_XKB_CONFIG_ROOT: $SNAP_USER_DATA:$SNAP/usr/share:$QT_XKB_CONFIG_ROOT
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  electron-regtest:
    command: wagerr-electron-app.AppImage--regtest
    plugs: [network, network-bind, network-status, unity7, desktop, desktop-legacy, wayland, x11, mir, opengl, home, gsettings, removable-media, screen-inhibit-control, pulseaudio, media-hub]
    desktop: wagerr-electron-app_regtest.desktop
    environment:
      QT_XKB_CONFIG_ROOT: $SNAP_USER_DATA:$SNAP/usr/share:$QT_XKB_CONFIG_ROOT
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  cli:
    command: wagerr-cli
    plugs: [network, network-bind, home, removable-media]
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  cli-testnet:
    command: wagerr-cli --testnet
    plugs: [network, network-bind, home, removable-media]
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  cli-regtest:
    command: wagerr-cli --regtest
    plugs: [network, network-bind, home, removable-media]
    environment:
      XDG_DATA_DIRS: $SNAP_USER_DATA:$SNAP/usr/share:$XDG_DATA_DIRS
  tx:
    command: wagerr-tx
    plugs: [home]
  test:
    command: test_wagerr
    plugs: [home]
  testqt:
    command: test_wagerr-qt
    plugs: [home]
parts:
  wagerr:
    source: https://github.com/wagerr/wagerr
    source-type: git
    source-tag: master
    plugin: nil
    override-build: |
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "CUSTOM SETTINGS"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      #    use override prefix if binaries differ from project name, for ion it does,
      #    project is called ioncore because ion exists already as package. For anybody
      #    offering non official release and using own SNAP, this variable should be used
      #    default value is "false", to enable it, use your projects binary prefix
      OVERRIDEBINPREFIX="false"
      OVERRIDEDATADIR="false"
      OVERRIDECONF="${OVERRIDEDATADIR}"
      COPYCONF=0    # copy example config into users data folder, 1 = enabled
      JOBS=4        # 0 means off and make will run without -j
      PATCH=1       # 1 = enabled
      SPLASHPNGS=0  # patch pngs to differ visaully from those installed from self compilation or other source like deb
      FIXPPCBUILD=1 # if ppc builds fail due to failed qt, apps part will return error and build will fail, 1 = enabled
      EXTRALOG=1    # prints env and all installed files at the end of current script
      RUNTESTS=0    # run make check after post install part
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "SET OVERRIDE VARIABLES IF SET" # checks OVERRIDEBINPREFIX, OVERRIDEDATADIR and OVERRIDECONF
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      if [ $OVERRIDEBINPREFIX = "false" ]; then
        BINPREF="${SNAPCRAFT_PROJECT_NAME}"
      else
        BINPREF="${OVERRIDEBINPREFIX}"
      fi
      if [ $OVERRIDEDATADIR = "false" ]; then
        DATADIR="${SNAPCRAFT_PROJECT_NAME}"
      else
        DATADIR="${OVERRIDEDATADIR}"
      fi
      if [ $OVERRIDECONF = "false" ]; then
        CONF="${SNAPCRAFT_PROJECT_NAME}"
      else
        CONF="${OVERRIDECONF}"
      fi
      echo "BINPREF VARIABLE - ${BINPREF}"
      echo "DATADIR VARIABLE - ${DATADIR}"
      echo "CONF VARIABLE - ${CONF}"
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "OVERRIDE ARCHITECTURE" # applies currently only on i386,  for i386 architecture, we will use i686-linux-gnu to compile dependencies
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      if [ $SNAPCRAFT_ARCH_TRIPLET = "i386-linux-gnu" ]; then
        HOST="i686-linux-gnu"
      else
        HOST="${SNAPCRAFT_ARCH_TRIPLET}"
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "APPLY PATCHES ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # patches which have to be applied for compilation, replace splash screen
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      cd ${SNAPCRAFT_PART_BUILD}
      if [ $PATCH = 1 ]; then
        echo "apply patches:"
        git apply $SNAPCRAFT_PART_BUILD/snap/local/patches/X001-default_data_dir.patch
        git apply $SNAPCRAFT_PART_BUILD/snap/local/patches/X002-fix-bdb-tmp-folder.patch
        git apply $SNAPCRAFT_PART_BUILD/snap/local/patches/X003-fix-use-snap-instead-of-dirty.patch
        sed -i 's/tar --strip-components/tar --no-same-owner --strip-components/' ${SNAPCRAFT_PART_BUILD}/depends/funcs.mk
      else
        echo "APPLY .patch files during compilation is disabled, skipping"
      fi
      if [ $SPLASHPNGS = 1 ]; then
        echo "replace splash screen with snapcrafts"
        mv -f $SNAPCRAFT_PART_BUILD/contrib/snap/images/splash.png $SNAPCRAFT_PART_BUILD/src/qt/res/images/splash.png
        mv -f $SNAPCRAFT_PART_BUILD/contrib/snap/images/splash_regtest.png $SNAPCRAFT_PART_BUILD/src/qt/res/images/splash_regtest.png
        mv -f $SNAPCRAFT_PART_BUILD/contrib/snap/images/splash_testnet.png $SNAPCRAFT_PART_BUILD/src/qt/res/images/splash_testnet.png
        mv -f $SNAPCRAFT_PART_BUILD/contrib/snap/icons/favicon.ico $SNAPCRAFT_PART_BUILD/share/pixmaps/favicon.ico
        mv -f $SNAPCRAFT_PART_BUILD/contrib/snap/icons/favicon_testnet.ico $SNAPCRAFT_PART_BUILD/share/pixmaps/favicon_testnet.ico
        mv -f $SNAPCRAFT_PART_BUILD/contrib/snap/icons/favicon_regtest.ico $SNAPCRAFT_PART_BUILD/share/pixmaps/favicon_regtest.ico
        mv -f $SNAPCRAFT_PART_BUILD/snap/local/desktop/${BINPREF}.png $SNAPCRAFT_PART_BUILD/src/qt/res/icons/${BINPREF}.png
        mv -f $SNAPCRAFT_PART_BUILD/snap/local/desktop/${BINPREF}_testnet.png $SNAPCRAFT_PART_BUILD/src/qt/res/icons/${BINPREF}_testnet.png
        mv -f $SNAPCRAFT_PART_BUILD/snap/local/desktop/${BINPREF}_regtest.png $SNAPCRAFT_PART_BUILD/src/qt/res/icons/${BINPREF}_regtest.png
      else
        echo "patch icons and images is disabled, skipping"
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "BUILD DEPENDENCIES"
      echo "PRECOMPILE ${SNAPCRAFT_ARCH_TRIPLET} DEPENDENCIES FOR ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # cd to depends folder, download and precompile
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      cd ${SNAPCRAFT_PART_BUILD}/depends
      make download-linux
      if [ $JOBS = 0 ]; then
        make
      else
        make -j${JOBS} HOST=${HOST}
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "CONFIGURATION OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # run configure with prefix to include depends
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      cd ${SNAPCRAFT_PART_BUILD}
      echo "Configure and build ${BINPREF}"
      ./autogen.sh
      ./configure --prefix=`pwd`/depends/${HOST}
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "COMPILATION OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # run make to compile using -j
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      if [ $JOBS = 0 ]; then
        make
      else
        make -j${JOBS} HOST=${HOST}
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "INSTALLATION OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # run make install with a prefix where to install
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      make install prefix=${SNAPCRAFT_PART_INSTALL}
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "POST INSTALL SCRIPTS OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}" # run make install with a prefix where to install
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      if [ $FIXPPCBUILD = 1 ]; then
        if [ $SNAPCRAFT_ARCH_TRIPLET = "powerpc64le-linux-gnu" ]; then
          if [ -e $SNAPCRAFT_PART_BUILD/src/qt/${BINPREF}-qt ]; then
            echo "PPC64EL fix - ${BINPREF}-qt exists, fix unrequired"
          else
            echo "echo ${BINPREF}-qt is not installed" > ${SNAPCRAFT_PART_INSTALL}/usr/bin/${BINPREF}-qt
            chmod +x ${SNAPCRAFT_PART_INSTALL}/usr/bin/${BINPREF}-qt
            echo "PPC64EL fix - ${BINPREF}-qt does not exist, fix required, dummy as ${BINPREF}-qt"
          fi
          if [ -e $SNAPCRAFT_PART_BUILD/src/qt/test/test_${BINPREF}-qt ]; then
            echo "PPC64EL fix - test_${BINPREF}-qt exists, fix unrequired"
          else
            echo "echo test_${BINPREF}-qt is not installed" > ${SNAPCRAFT_PART_INSTALL}/usr/bin/test_${BINPREF}-qt
            chmod +x ${SNAPCRAFT_PART_INSTALL}/usr/bin/test_${BINPREF}-qt
            echo "PPC64EL fix - test_${BINPREF}-qt does not exist, fix required, dummy as test_${BINPREF}-qt"
          fi
          if [ -e $SNAPCRAFT_PART_BUILD/src/test/test_${BINPREF} ]; then
            echo "PPC64EL fix - test_${BINPREF} exists, fix unrequired"
          else
            echo "echo test_${BINPREF} is not installed" > ${SNAPCRAFT_PART_INSTALL}/usr/bin/test_${BINPREF}
            chmod +x ${SNAPCRAFT_PART_INSTALL}/usr/bin/test_${BINPREF}
            echo "PPC64EL fix - test_${BINPREF} does not exist, fix required, dummy as test_${BINPREF}"
          fi
        fi
        else
          echo "PPC64EL fix disabled, skipping"
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "CONFIG FILE" # create .wagerr folder and copy example config - !!!warning!!!: do not copy as wagerr.conf
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      mkdir -p ${SNAP_USER_COMMON}/.${DATADIR}
      if [ $COPYCONF = 1 ]; then
        cp ${SNAPCRAFT_PART_BUILD}/contrib/debian/manpages/${CONF}.conf.5 ${SNAP_USER_COMMON}/.${DATADIR}/${CONF}-example.conf
      else
        echo "COPY CONFIG FILE disabled, skipping"
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "RUN TESTS" # if tests fail to pass, build and release will fail
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      cd ${SNAPCRAFT_PART_BUILD}
      if [ $RUNTESTS = 1 ]; then
        make check
      else
        echo "RUN TESTS disabled, skipping"
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "WAGERR SPECIFIC"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "get wagerr electron wallet"
      if [ $HOST = "i686-linux-gnu" ]; then
        git clone https://github.com/wagerr/wagerr-electron-app.git
        mkdir -p ./wagerr-electron-app/bin
        cp -f ${SNAPCRAFT_PART_INSTALL}/bin/wagerrd ./wagerr-electron-app/bin/wagerrd
        cp -f ${SNAPCRAFT_PART_INSTALL}/bin/wagerr-cli ./wagerr-electron-app/bin/wagerr-cli
        cd wagerr-electron-app
        #git apply $SNAPCRAFT_PART_BUILD/snap/local/patches/X004-electron-snap-patch.patch
        npm install
        npm run package
        cd release
        APPIMAGE=$(find *i386*.AppImage)
        chmod a+x $APPIMAGE
        $APPIMAGE --appimage-extract
        mv -f ./squashfs-root/* ${SNAPCRAFT_PART_INSTALL}
        ls *.AppImage
        cp -f $APPIMAGE ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app.AppImage
        cd ..
      elif [ $HOST = "x86_64-linux-gnu" ]; then
        git clone https://github.com/wagerr/wagerr-electron-app.git
        mkdir -p ./wagerr-electron-app/bin
        cp -f ${SNAPCRAFT_PART_INSTALL}/bin/wagerrd ./wagerr-electron-app/bin/wagerrd
        cp -f ${SNAPCRAFT_PART_INSTALL}/bin/wagerr-cli ./wagerr-electron-app/bin/wagerr-cli
        cd wagerr-electron-app
        #git apply $SNAPCRAFT_PART_BUILD/snap/local/patches/X004-electron-snap-patch.patch
        npm install
        npm run package
        cd release
        APPIMAGE=$(find *x86_64*.AppImage)
        chmod a+x $APPIMAGE
        $APPIMAGE --appimage-extract
        mv -f ./squashfs-root/* ${SNAPCRAFT_PART_INSTALL}
        ls *.AppImage
        cp -f $APPIMAGE ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app.AppImage
        cd ..
      else
        # create dummy file for all non available platforms, temp workaround **TODO**
        touch ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app.AppImage
      fi
      if [ -f ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app ]; then
        echo "Found - ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app.AppImage"
      else
        # workaround to get snap successfull **TODO** should be removed later
        touch ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app.AppImage
      fi
      if [ -f ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app--testnet ]; then
        echo "Found - ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app.AppImage--testnet"
      else
        # workaround to get snap successfull **TODO** should be removed later
        touch ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app.AppImage--testnet
      fi
      if [ -f ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app--regtest ]; then
        echo "Found - ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app.AppImage--regtest"
      else
        # workaround to get snap successfull **TODO** should be removed later
        touch ${SNAPCRAFT_PART_INSTALL}/wagerr-electron-app.AppImage--regtest
      fi
      echo "-----------------------------------------------"
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      echo "INSTALATION OF ${BINPREF}-${SNAPCRAFT_PROJECT_VERSION}-snap has finished" # List installed files and vars when installation is finished
      echo "+++++++++++++++++++++++++++++++++++++++++++++++"
      if [ $EXTRALOG = 1 ]; then
        find ${SNAPCRAFT_PART_INSTALL} -type f
        env
      else
        echo "RUN TESTS disabled, skipping"
      fi
    build-packages:
      - curl
      - wget
      - gcc
      - gcc-8
      - g++
      - g++-8
      - make
      - autoconf
      - automake
      - cmake
      - pkg-config
      - libtool
      - bsdmainutils
      - binutils
      - python3
      - help2man
      - doxygen
      - npm
    stage-packages:
      - libxkbcommon0
      - ttf-ubuntu-font-family
      - dmz-cursor-theme
      - light-themes
      - shared-mime-info
      - libqt5gui5
      - libgdk-pixbuf2.0-0
      - libqt5svg5 # for loading icon themes which are svg
      - locales-all
      - qtwayland5
      - ca-certificates
    after:
      - patches
  patches:
    source: snap/local/patches
    plugin: dump
    prime:
      - -*
  desktop:
    source: snap/local/desktop
    plugin: dump